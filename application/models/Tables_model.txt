<?php
/**
 * Created by PhpStorm.
 * User: vsergiu
 * Date: 9/11/17
 * Time: 10:56 AM
 */

require_once(APPPATH.'libraries/RecordSet.php');


/**
 * Class Tables_model
 * @property CI_Loader $load
 * @property Data_model dm
 * @property CI_DB_query_builder db
 */

class Tables_model extends CI_Model {
    function __construct ()
    {
        $this->load->model("Data_model","dm");
    }

    function init($database) {
        if(!$this->load->database($database))
            return false;
        return $this->dm->init($database);
    }

    function get_tables($dbName,$searchStr=null) {
        if(is_null($searchStr))
            return array_keys(get_object_vars($this->dm->get_config()));
    }

    /**
     * @param $dbName
     * @param null $searchStr
     * @return array
     */
    function get_views($dbName,$searchStr=null) {
        $sql = "SHOW FULL TABLES IN $dbName WHERE TABLE_TYPE LIKE 'VIEW'";
        $records = $this->db->query($sql)->result();
        $views = [];
        foreach ($records as $rec) {
            $propName = "Tables_in_$dbName";
            array_push($views,$rec->$propName);
        }
        return $views;
    }

    /**
     * @param string $viewName
     * @param array $fields
     * @param array $filters
     * @param array $order
     * @param int $offset
     * @param int $limit
     * @return RecordSet
     */
    function get_view_records($viewName, $fields, $filters, $order, $offset, $limit, $groupBy) {
        $from = [
            "table"=>$viewName,
            "fields"=> [],
            "order"=> [],
            "where"=> []
        ];

        $whereArr = [];
        foreach ($filters as $filter) {
            if($filter->left->alias==$viewName) {
                $whereArr[] = generate_where_str($filter);
            }
        }

        // take care  of the from part
        if(isset($fields[$viewName])) {
            foreach ($fields[$viewName] as $fld)
                if ($this->dm->is_valid_field($viewName, $fld))
                    array_push($from["fields"], $fld);
        }

        if(empty($from["fields"]))
            array_push($from["fields"], "*");
        else {
            if($this->dm->is_valid_field($viewName,"id"))
                array_push($from["fields"], "id");
            $from["fields"] = array_unique($from["fields"]);
        }

        // ORDER BY array generation
        $orderByArr = [];
        foreach ($order as $item) {
            if($item->alias==$viewName && $this->dm->is_valid_field($viewName,$item->fld))
                $orderByArr[] = sprintf("%s.%s %s",$viewName,$item->fld,$item->dir);
        }


        list($countSql,$mainSql) = render_select_query($from,[],$whereArr,$orderByArr,$offset,$limit,$groupBy);
        //echo $countSql;
        $res = $this->db->query($countSql);
        $totalRecs = 0;
        if($res->num_rows())
            $totalRecs = $res->row()->cnt;

        if(!$totalRecs) {
            $mainSql = "SELECT 1 from DUAL where false ";
        }

        $res = $this->db->query($mainSql)->result_array();
        $recordSet = new RecordSet([],$viewName,$offset,$totalRecs);
        foreach ($res as $rec) {
            $recordSet->add_record($viewName,$rec);
        }

        return $recordSet;

    }



    /**
     * @param $from
     * @param $joins
     * @param array|null $whereArr
     * @param array|null $orderByArr
     * @param int|null $offset
     * @param int|null $limit
     * @return array
     */
    private function select_query($from, $joins, $whereArr=null, $orderByArr=null, $offset=null, $limit=null) {
        // prepare selected fields statement
        $fldsArr = [];
        $fldsArr[] = $from["table"].".".implode(",".$from["table"].".",$from["fields"]);


        // prepare JOIN statement
        $joinArr = [];
        foreach ($joins as $fld=>$join) {
            $fldsArr[] = $join["alias"].".".implode(",".$join["alias"].".",$join["fields"]);
            $joinArr[] = sprintf("LEFT JOIN %s AS %s ON %s=%s",$join["table"], $join["alias"], $join["left"], $join["right"]);
        }

        // prepare where statement
        $sqlWhere = 1;
        if(!empty($whereArr))
            $sqlWhere = implode(" AND ",$whereArr);

        // prepare order statement
        $sqlOrder = "1";
        if(!empty($orderByArr))
            $sqlOrder = implode(", ",$orderByArr);

        // prepare limit statement
        $sqlLimit = "";
        if(is_numeric($offset) && is_numeric($limit))
            $sqlLimit = "LIMIT $offset,$limit";

        $countSql = sprintf("SELECT count(*) as cnt FROM %s %s WHERE %s",
            $from["table"],
            implode(" ", $joinArr),
            $sqlWhere);
        $mainSql = sprintf("SELECT %s FROM %s %s WHERE %s ORDER BY %s %s",
            implode(",", $fldsArr),
            $from["table"],
            implode(" ", $joinArr),
            $sqlWhere,
            $sqlOrder,
            $sqlLimit
        );

        return array($countSql,$mainSql);


        //return array($totalRecs,$this->db->query($mainSql));
    }
}
